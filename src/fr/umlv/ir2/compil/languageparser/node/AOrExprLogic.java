/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.node;

import java.util.*;
import fr.umlv.ir2.compil.languageparser.analysis.*;

public final class AOrExprLogic extends PExprLogic
{
    private PExprLogic _exprLogic_;
    private TOr _or_;
    private PExprComp _exprComp_;

    public AOrExprLogic()
    {
    }

    public AOrExprLogic(
        PExprLogic _exprLogic_,
        TOr _or_,
        PExprComp _exprComp_)
    {
        setExprLogic(_exprLogic_);

        setOr(_or_);

        setExprComp(_exprComp_);

    }
    public Object clone()
    {
        return new AOrExprLogic(
            (PExprLogic) cloneNode(_exprLogic_),
            (TOr) cloneNode(_or_),
            (PExprComp) cloneNode(_exprComp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrExprLogic(this);
    }

    public PExprLogic getExprLogic()
    {
        return _exprLogic_;
    }

    public void setExprLogic(PExprLogic node)
    {
        if(_exprLogic_ != null)
        {
            _exprLogic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exprLogic_ = node;
    }

    public TOr getOr()
    {
        return _or_;
    }

    public void setOr(TOr node)
    {
        if(_or_ != null)
        {
            _or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _or_ = node;
    }

    public PExprComp getExprComp()
    {
        return _exprComp_;
    }

    public void setExprComp(PExprComp node)
    {
        if(_exprComp_ != null)
        {
            _exprComp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exprComp_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_exprLogic_)
            + toString(_or_)
            + toString(_exprComp_);
    }

    void removeChild(Node child)
    {
        if(_exprLogic_ == child)
        {
            _exprLogic_ = null;
            return;
        }

        if(_or_ == child)
        {
            _or_ = null;
            return;
        }

        if(_exprComp_ == child)
        {
            _exprComp_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_exprLogic_ == oldChild)
        {
            setExprLogic((PExprLogic) newChild);
            return;
        }

        if(_or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(_exprComp_ == oldChild)
        {
            setExprComp((PExprComp) newChild);
            return;
        }

    }
}
