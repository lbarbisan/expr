/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.node;

import java.util.*;
import fr.umlv.ir2.compil.languageparser.analysis.*;

public final class ACallExprSimple extends PExprSimple
{
    private TId _id_;
    private TLPar _lPar_;
    private final LinkedList _callParams_ = new TypedLinkedList(new CallParams_Cast());
    private PCallParamsEnd _callParamsEnd_;
    private TRPar _rPar_;

    public ACallExprSimple()
    {
    }

    public ACallExprSimple(
        TId _id_,
        TLPar _lPar_,
        List _callParams_,
        PCallParamsEnd _callParamsEnd_,
        TRPar _rPar_)
    {
        setId(_id_);

        setLPar(_lPar_);

        {
            this._callParams_.clear();
            this._callParams_.addAll(_callParams_);
        }

        setCallParamsEnd(_callParamsEnd_);

        setRPar(_rPar_);

    }

    public ACallExprSimple(
        TId _id_,
        TLPar _lPar_,
        XPCallParams _callParams_,
        PCallParamsEnd _callParamsEnd_,
        TRPar _rPar_)
    {
        setId(_id_);

        setLPar(_lPar_);

        if(_callParams_ != null)
        {
            while(_callParams_ instanceof X1PCallParams)
            {
                this._callParams_.addFirst(((X1PCallParams) _callParams_).getPCallParams());
                _callParams_ = ((X1PCallParams) _callParams_).getXPCallParams();
            }
            this._callParams_.addFirst(((X2PCallParams) _callParams_).getPCallParams());
        }

        setCallParamsEnd(_callParamsEnd_);

        setRPar(_rPar_);

    }
    public Object clone()
    {
        return new ACallExprSimple(
            (TId) cloneNode(_id_),
            (TLPar) cloneNode(_lPar_),
            cloneList(_callParams_),
            (PCallParamsEnd) cloneNode(_callParamsEnd_),
            (TRPar) cloneNode(_rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACallExprSimple(this);
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public LinkedList getCallParams()
    {
        return _callParams_;
    }

    public void setCallParams(List list)
    {
        _callParams_.clear();
        _callParams_.addAll(list);
    }

    public PCallParamsEnd getCallParamsEnd()
    {
        return _callParamsEnd_;
    }

    public void setCallParamsEnd(PCallParamsEnd node)
    {
        if(_callParamsEnd_ != null)
        {
            _callParamsEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _callParamsEnd_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_id_)
            + toString(_lPar_)
            + toString(_callParams_)
            + toString(_callParamsEnd_)
            + toString(_rPar_);
    }

    void removeChild(Node child)
    {
        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_callParams_.remove(child))
        {
            return;
        }

        if(_callParamsEnd_ == child)
        {
            _callParamsEnd_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        for(ListIterator i = _callParams_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_callParamsEnd_ == oldChild)
        {
            setCallParamsEnd((PCallParamsEnd) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

    }

    private class CallParams_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCallParams node = (PCallParams) o;

            if((node.parent() != null) &&
                (node.parent() != ACallExprSimple.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ACallExprSimple.this))
            {
                node.parent(ACallExprSimple.this);
            }

            return node;
        }
    }
}
