/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.node;

import java.util.*;
import fr.umlv.ir2.compil.languageparser.analysis.*;

public final class AForDeclarations extends PDeclarations
{
    private TMcFor _mcFor_;
    private TId _id_;
    private TEqual _equal_;
    private PExpression _a_;
    private TMcTo _mcTo_;
    private PExpression _b_;
    private TMcPrint _mcPrint_;
    private PExpression _c_;
    private TSemicolon _semicolon_;

    public AForDeclarations()
    {
    }

    public AForDeclarations(
        TMcFor _mcFor_,
        TId _id_,
        TEqual _equal_,
        PExpression _a_,
        TMcTo _mcTo_,
        PExpression _b_,
        TMcPrint _mcPrint_,
        PExpression _c_,
        TSemicolon _semicolon_)
    {
        setMcFor(_mcFor_);

        setId(_id_);

        setEqual(_equal_);

        setA(_a_);

        setMcTo(_mcTo_);

        setB(_b_);

        setMcPrint(_mcPrint_);

        setC(_c_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new AForDeclarations(
            (TMcFor) cloneNode(_mcFor_),
            (TId) cloneNode(_id_),
            (TEqual) cloneNode(_equal_),
            (PExpression) cloneNode(_a_),
            (TMcTo) cloneNode(_mcTo_),
            (PExpression) cloneNode(_b_),
            (TMcPrint) cloneNode(_mcPrint_),
            (PExpression) cloneNode(_c_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForDeclarations(this);
    }

    public TMcFor getMcFor()
    {
        return _mcFor_;
    }

    public void setMcFor(TMcFor node)
    {
        if(_mcFor_ != null)
        {
            _mcFor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mcFor_ = node;
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public PExpression getA()
    {
        return _a_;
    }

    public void setA(PExpression node)
    {
        if(_a_ != null)
        {
            _a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _a_ = node;
    }

    public TMcTo getMcTo()
    {
        return _mcTo_;
    }

    public void setMcTo(TMcTo node)
    {
        if(_mcTo_ != null)
        {
            _mcTo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mcTo_ = node;
    }

    public PExpression getB()
    {
        return _b_;
    }

    public void setB(PExpression node)
    {
        if(_b_ != null)
        {
            _b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _b_ = node;
    }

    public TMcPrint getMcPrint()
    {
        return _mcPrint_;
    }

    public void setMcPrint(TMcPrint node)
    {
        if(_mcPrint_ != null)
        {
            _mcPrint_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mcPrint_ = node;
    }

    public PExpression getC()
    {
        return _c_;
    }

    public void setC(PExpression node)
    {
        if(_c_ != null)
        {
            _c_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _c_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_mcFor_)
            + toString(_id_)
            + toString(_equal_)
            + toString(_a_)
            + toString(_mcTo_)
            + toString(_b_)
            + toString(_mcPrint_)
            + toString(_c_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_mcFor_ == child)
        {
            _mcFor_ = null;
            return;
        }

        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

        if(_a_ == child)
        {
            _a_ = null;
            return;
        }

        if(_mcTo_ == child)
        {
            _mcTo_ = null;
            return;
        }

        if(_b_ == child)
        {
            _b_ = null;
            return;
        }

        if(_mcPrint_ == child)
        {
            _mcPrint_ = null;
            return;
        }

        if(_c_ == child)
        {
            _c_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_mcFor_ == oldChild)
        {
            setMcFor((TMcFor) newChild);
            return;
        }

        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(_a_ == oldChild)
        {
            setA((PExpression) newChild);
            return;
        }

        if(_mcTo_ == oldChild)
        {
            setMcTo((TMcTo) newChild);
            return;
        }

        if(_b_ == oldChild)
        {
            setB((PExpression) newChild);
            return;
        }

        if(_mcPrint_ == oldChild)
        {
            setMcPrint((TMcPrint) newChild);
            return;
        }

        if(_c_ == oldChild)
        {
            setC((PExpression) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }
}
