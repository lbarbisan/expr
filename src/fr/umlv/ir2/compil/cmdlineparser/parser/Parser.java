/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.cmdlineparser.parser;

import fr.umlv.ir2.compil.cmdlineparser.lexer.*;
import fr.umlv.ir2.compil.cmdlineparser.node.*;
import fr.umlv.ir2.compil.cmdlineparser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(0), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(6), node, false); } break;
                    case 3: { Node node = new3(); push(goTo(6), node, false); } break;
                    case 4: { Node node = new4(); push(goTo(1), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(2), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(2), node, true); } break;
                    case 7: { Node node = new7(); push(goTo(3), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(3), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(3), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(3), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(3), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(3), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(3), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(3), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(3), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(3), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(3), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(4), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(4), node, true); } break;
                    case 20: { Node node = new20(); push(goTo(5), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGrammar node1 = (PGrammar) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        POptionsStart node2 = (POptionsStart) pop();
        XPFiles node1 = null;
        AGrammar node = new AGrammar(node1, node2);
        return node;
    }

    Node new1()
    {
        POptionsStart node2 = (POptionsStart) pop();
        XPFiles node1 = (XPFiles) pop();
        AGrammar node = new AGrammar(node1, node2);
        return node;
    }

    Node new2()
    {
        PFiles node2 = (PFiles) pop();
        XPFiles node1 = (XPFiles) pop();
        X1PFiles node = new X1PFiles(node1, node2);
        return node;
    }

    Node new3()
    {
        PFiles node1 = (PFiles) pop();
        X2PFiles node = new X2PFiles(node1);
        return node;
    }

    Node new4()
    {
        TQuote node3 = (TQuote) pop();
        TId node2 = (TId) pop();
        TQuote node1 = (TQuote) pop();
        AFiles node = new AFiles(node1, node2, node3);
        return node;
    }

    Node new5()
    {
        POptionsEnd node2 = (POptionsEnd) pop();
        TQuote node1 = (TQuote) pop();
        AOptionsStart node = new AOptionsStart(node1, node2);
        return node;
    }

    Node new6()
    {
        AEmptyOptionsStart node = new AEmptyOptionsStart();
        return node;
    }

    Node new7()
    {
        POptionsStart node3 = (POptionsStart) pop();
        TQuote node2 = (TQuote) pop();
        TOptVerbose node1 = (TOptVerbose) pop();
        AVerboseOptionsEnd node = new AVerboseOptionsEnd(node1, node2, node3);
        return node;
    }

    Node new8()
    {
        POptionsStart node3 = (POptionsStart) pop();
        TQuote node2 = (TQuote) pop();
        TOptHelp node1 = (TOptHelp) pop();
        AHelpOptionsEnd node = new AHelpOptionsEnd(node1, node2, node3);
        return node;
    }

    Node new9()
    {
        POptionsStart node3 = (POptionsStart) pop();
        TQuote node2 = (TQuote) pop();
        TOptLex node1 = (TOptLex) pop();
        ALexOptionsEnd node = new ALexOptionsEnd(node1, node2, node3);
        return node;
    }

    Node new10()
    {
        POptionsStart node3 = (POptionsStart) pop();
        TQuote node2 = (TQuote) pop();
        TOptI node1 = (TOptI) pop();
        AIOptionsEnd node = new AIOptionsEnd(node1, node2, node3);
        return node;
    }

    Node new11()
    {
        POptionsStart node3 = (POptionsStart) pop();
        TQuote node2 = (TQuote) pop();
        TOptHtml node1 = (TOptHtml) pop();
        AHtmlOptionsEnd node = new AHtmlOptionsEnd(node1, node2, node3);
        return node;
    }

    Node new12()
    {
        PNextOption node4 = (PNextOption) pop();
        PId node3 = null;
        TQuote node2 = (TQuote) pop();
        TOptHtmlFile node1 = (TOptHtmlFile) pop();
        AHtmlFileOptionsEnd node = new AHtmlFileOptionsEnd(node1, node2, node3, node4);
        return node;
    }

    Node new13()
    {
        PNextOption node4 = (PNextOption) pop();
        PId node3 = (PId) pop();
        TQuote node2 = (TQuote) pop();
        TOptHtmlFile node1 = (TOptHtmlFile) pop();
        AHtmlFileOptionsEnd node = new AHtmlFileOptionsEnd(node1, node2, node3, node4);
        return node;
    }

    Node new14()
    {
        POptionsStart node3 = (POptionsStart) pop();
        TQuote node2 = (TQuote) pop();
        TOptVm node1 = (TOptVm) pop();
        AVmOptionsEnd node = new AVmOptionsEnd(node1, node2, node3);
        return node;
    }

    Node new15()
    {
        POptionsStart node3 = (POptionsStart) pop();
        TQuote node2 = (TQuote) pop();
        TOptX86 node1 = (TOptX86) pop();
        AX86OptionsEnd node = new AX86OptionsEnd(node1, node2, node3);
        return node;
    }

    Node new16()
    {
        PNextOption node4 = (PNextOption) pop();
        PId node3 = null;
        TQuote node2 = (TQuote) pop();
        TOptObj node1 = (TOptObj) pop();
        AObjOptionsEnd node = new AObjOptionsEnd(node1, node2, node3, node4);
        return node;
    }

    Node new17()
    {
        PNextOption node4 = (PNextOption) pop();
        PId node3 = (PId) pop();
        TQuote node2 = (TQuote) pop();
        TOptObj node1 = (TOptObj) pop();
        AObjOptionsEnd node = new AObjOptionsEnd(node1, node2, node3, node4);
        return node;
    }

    Node new18()
    {
        POptionsEnd node2 = (POptionsEnd) pop();
        TQuote node1 = (TQuote) pop();
        ANextOption node = new ANextOption(node1, node2);
        return node;
    }

    Node new19()
    {
        AEmptyNextOption node = new AEmptyNextOption();
        return node;
    }

    Node new20()
    {
        TQuote node3 = (TQuote) pop();
        TId node2 = (TId) pop();
        TQuote node1 = (TQuote) pop();
        AId node = new AId(node1, node2, node3);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 6}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {5, SHIFT, 10}, {6, SHIFT, 11}, {7, SHIFT, 12}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, },
			{{-1, ERROR, 2}, {11, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 1}, },
			{{-1, ERROR, 6}, {0, SHIFT, 19}, },
			{{-1, ERROR, 7}, {0, SHIFT, 20}, },
			{{-1, ERROR, 8}, {0, SHIFT, 21}, },
			{{-1, ERROR, 9}, {0, SHIFT, 22}, },
			{{-1, ERROR, 10}, {0, SHIFT, 23}, },
			{{-1, ERROR, 11}, {0, SHIFT, 24}, },
			{{-1, ERROR, 12}, {0, SHIFT, 25}, },
			{{-1, ERROR, 13}, {0, SHIFT, 26}, },
			{{-1, ERROR, 14}, {0, SHIFT, 27}, },
			{{-1, ERROR, 15}, {0, SHIFT, 28}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 29}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 29}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 29}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 29}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 29}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 35}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 29}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 35}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 29}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 29}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {5, SHIFT, 10}, {6, SHIFT, 11}, {7, SHIFT, 12}, {8, SHIFT, 13}, {9, SHIFT, 14}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 35}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {5, SHIFT, 10}, {6, SHIFT, 11}, {7, SHIFT, 12}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 42}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 44}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 44}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 42}, {0, SHIFT, 47}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 44}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {5, SHIFT, 10}, {6, SHIFT, 11}, {7, SHIFT, 12}, {8, SHIFT, 13}, {9, SHIFT, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 20}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {5, 17}, },
			{{-1, 4}, {5, 18}, {19, 30}, {20, 31}, {21, 32}, {22, 33}, {23, 34}, {25, 38}, {27, 41}, },
			{{-1, 16}, {35, 43}, {44, 43}, },
			{{-1, 36}, {26, 39}, {37, 45}, {40, 46}, },
			{{-1, 37}, {26, 40}, },
			{{-1, 5}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '"', EOF",
			"expecting: opt verbose, opt help, opt lex, opt i, opt html, opt html file, opt x86, opt obj, opt vm, id",
			"expecting: EOF",
			"expecting: '"'",
			"expecting: opt verbose, opt help, opt lex, opt i, opt html, opt html file, opt x86, opt obj, opt vm",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 0, 2, 3, 2, 4, 2, 2, 0, 
        };*/
}
