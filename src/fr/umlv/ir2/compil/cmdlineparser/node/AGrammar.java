/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.cmdlineparser.node;

import java.util.*;
import fr.umlv.ir2.compil.cmdlineparser.analysis.*;

public final class AGrammar extends PGrammar
{
    private final LinkedList _files_ = new TypedLinkedList(new Files_Cast());
    private POptionsStart _optionsStart_;

    public AGrammar()
    {
    }

    public AGrammar(
        List _files_,
        POptionsStart _optionsStart_)
    {
        {
            this._files_.clear();
            this._files_.addAll(_files_);
        }

        setOptionsStart(_optionsStart_);

    }

    public AGrammar(
        XPFiles _files_,
        POptionsStart _optionsStart_)
    {
        if(_files_ != null)
        {
            while(_files_ instanceof X1PFiles)
            {
                this._files_.addFirst(((X1PFiles) _files_).getPFiles());
                _files_ = ((X1PFiles) _files_).getXPFiles();
            }
            this._files_.addFirst(((X2PFiles) _files_).getPFiles());
        }

        setOptionsStart(_optionsStart_);

    }
    public Object clone()
    {
        return new AGrammar(
            cloneList(_files_),
            (POptionsStart) cloneNode(_optionsStart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGrammar(this);
    }

    public LinkedList getFiles()
    {
        return _files_;
    }

    public void setFiles(List list)
    {
        _files_.clear();
        _files_.addAll(list);
    }

    public POptionsStart getOptionsStart()
    {
        return _optionsStart_;
    }

    public void setOptionsStart(POptionsStart node)
    {
        if(_optionsStart_ != null)
        {
            _optionsStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _optionsStart_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_files_)
            + toString(_optionsStart_);
    }

    void removeChild(Node child)
    {
        if(_files_.remove(child))
        {
            return;
        }

        if(_optionsStart_ == child)
        {
            _optionsStart_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _files_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_optionsStart_ == oldChild)
        {
            setOptionsStart((POptionsStart) newChild);
            return;
        }

    }

    private class Files_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PFiles node = (PFiles) o;

            if((node.parent() != null) &&
                (node.parent() != AGrammar.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AGrammar.this))
            {
                node.parent(AGrammar.this);
            }

            return node;
        }
    }
}
