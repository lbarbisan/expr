/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.cmdlineparser.analysis;

import java.util.*;
import fr.umlv.ir2.compil.cmdlineparser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGrammar().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGrammar(AGrammar node)
    {
        defaultIn(node);
    }

    public void outAGrammar(AGrammar node)
    {
        defaultOut(node);
    }

    public void caseAGrammar(AGrammar node)
    {
        inAGrammar(node);
        {
            Object temp[] = node.getFiles().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFiles) temp[i]).apply(this);
            }
        }
        if(node.getOptionsStart() != null)
        {
            node.getOptionsStart().apply(this);
        }
        outAGrammar(node);
    }

    public void inAFiles(AFiles node)
    {
        defaultIn(node);
    }

    public void outAFiles(AFiles node)
    {
        defaultOut(node);
    }

    public void caseAFiles(AFiles node)
    {
        inAFiles(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAFiles(node);
    }

    public void inAOptionsStart(AOptionsStart node)
    {
        defaultIn(node);
    }

    public void outAOptionsStart(AOptionsStart node)
    {
        defaultOut(node);
    }

    public void caseAOptionsStart(AOptionsStart node)
    {
        inAOptionsStart(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOptionsEnd() != null)
        {
            node.getOptionsEnd().apply(this);
        }
        outAOptionsStart(node);
    }

    public void inAEmptyOptionsStart(AEmptyOptionsStart node)
    {
        defaultIn(node);
    }

    public void outAEmptyOptionsStart(AEmptyOptionsStart node)
    {
        defaultOut(node);
    }

    public void caseAEmptyOptionsStart(AEmptyOptionsStart node)
    {
        inAEmptyOptionsStart(node);
        outAEmptyOptionsStart(node);
    }

    public void inAVerboseOptionsEnd(AVerboseOptionsEnd node)
    {
        defaultIn(node);
    }

    public void outAVerboseOptionsEnd(AVerboseOptionsEnd node)
    {
        defaultOut(node);
    }

    public void caseAVerboseOptionsEnd(AVerboseOptionsEnd node)
    {
        inAVerboseOptionsEnd(node);
        if(node.getOptVerbose() != null)
        {
            node.getOptVerbose().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOptionsStart() != null)
        {
            node.getOptionsStart().apply(this);
        }
        outAVerboseOptionsEnd(node);
    }

    public void inAHelpOptionsEnd(AHelpOptionsEnd node)
    {
        defaultIn(node);
    }

    public void outAHelpOptionsEnd(AHelpOptionsEnd node)
    {
        defaultOut(node);
    }

    public void caseAHelpOptionsEnd(AHelpOptionsEnd node)
    {
        inAHelpOptionsEnd(node);
        if(node.getOptHelp() != null)
        {
            node.getOptHelp().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOptionsStart() != null)
        {
            node.getOptionsStart().apply(this);
        }
        outAHelpOptionsEnd(node);
    }

    public void inALexOptionsEnd(ALexOptionsEnd node)
    {
        defaultIn(node);
    }

    public void outALexOptionsEnd(ALexOptionsEnd node)
    {
        defaultOut(node);
    }

    public void caseALexOptionsEnd(ALexOptionsEnd node)
    {
        inALexOptionsEnd(node);
        if(node.getOptLex() != null)
        {
            node.getOptLex().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOptionsStart() != null)
        {
            node.getOptionsStart().apply(this);
        }
        outALexOptionsEnd(node);
    }

    public void inAIOptionsEnd(AIOptionsEnd node)
    {
        defaultIn(node);
    }

    public void outAIOptionsEnd(AIOptionsEnd node)
    {
        defaultOut(node);
    }

    public void caseAIOptionsEnd(AIOptionsEnd node)
    {
        inAIOptionsEnd(node);
        if(node.getOptI() != null)
        {
            node.getOptI().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOptionsStart() != null)
        {
            node.getOptionsStart().apply(this);
        }
        outAIOptionsEnd(node);
    }

    public void inAHtmlOptionsEnd(AHtmlOptionsEnd node)
    {
        defaultIn(node);
    }

    public void outAHtmlOptionsEnd(AHtmlOptionsEnd node)
    {
        defaultOut(node);
    }

    public void caseAHtmlOptionsEnd(AHtmlOptionsEnd node)
    {
        inAHtmlOptionsEnd(node);
        if(node.getOptHtml() != null)
        {
            node.getOptHtml().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOptionsStart() != null)
        {
            node.getOptionsStart().apply(this);
        }
        outAHtmlOptionsEnd(node);
    }

    public void inAHtmlFileOptionsEnd(AHtmlFileOptionsEnd node)
    {
        defaultIn(node);
    }

    public void outAHtmlFileOptionsEnd(AHtmlFileOptionsEnd node)
    {
        defaultOut(node);
    }

    public void caseAHtmlFileOptionsEnd(AHtmlFileOptionsEnd node)
    {
        inAHtmlFileOptionsEnd(node);
        if(node.getOptHtmlFile() != null)
        {
            node.getOptHtmlFile().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getNextOption() != null)
        {
            node.getNextOption().apply(this);
        }
        outAHtmlFileOptionsEnd(node);
    }

    public void inAVmOptionsEnd(AVmOptionsEnd node)
    {
        defaultIn(node);
    }

    public void outAVmOptionsEnd(AVmOptionsEnd node)
    {
        defaultOut(node);
    }

    public void caseAVmOptionsEnd(AVmOptionsEnd node)
    {
        inAVmOptionsEnd(node);
        if(node.getOptVm() != null)
        {
            node.getOptVm().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOptionsStart() != null)
        {
            node.getOptionsStart().apply(this);
        }
        outAVmOptionsEnd(node);
    }

    public void inAX86OptionsEnd(AX86OptionsEnd node)
    {
        defaultIn(node);
    }

    public void outAX86OptionsEnd(AX86OptionsEnd node)
    {
        defaultOut(node);
    }

    public void caseAX86OptionsEnd(AX86OptionsEnd node)
    {
        inAX86OptionsEnd(node);
        if(node.getOptX86() != null)
        {
            node.getOptX86().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOptionsStart() != null)
        {
            node.getOptionsStart().apply(this);
        }
        outAX86OptionsEnd(node);
    }

    public void inAObjOptionsEnd(AObjOptionsEnd node)
    {
        defaultIn(node);
    }

    public void outAObjOptionsEnd(AObjOptionsEnd node)
    {
        defaultOut(node);
    }

    public void caseAObjOptionsEnd(AObjOptionsEnd node)
    {
        inAObjOptionsEnd(node);
        if(node.getOptObj() != null)
        {
            node.getOptObj().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getNextOption() != null)
        {
            node.getNextOption().apply(this);
        }
        outAObjOptionsEnd(node);
    }

    public void inANextOption(ANextOption node)
    {
        defaultIn(node);
    }

    public void outANextOption(ANextOption node)
    {
        defaultOut(node);
    }

    public void caseANextOption(ANextOption node)
    {
        inANextOption(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOptionsEnd() != null)
        {
            node.getOptionsEnd().apply(this);
        }
        outANextOption(node);
    }

    public void inAEmptyNextOption(AEmptyNextOption node)
    {
        defaultIn(node);
    }

    public void outAEmptyNextOption(AEmptyNextOption node)
    {
        defaultOut(node);
    }

    public void caseAEmptyNextOption(AEmptyNextOption node)
    {
        inAEmptyNextOption(node);
        outAEmptyNextOption(node);
    }

    public void inAId(AId node)
    {
        defaultIn(node);
    }

    public void outAId(AId node)
    {
        defaultOut(node);
    }

    public void caseAId(AId node)
    {
        inAId(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAId(node);
    }
}
