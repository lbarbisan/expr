/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.analysis;

import fr.umlv.ir2.compil.languageparser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGrammar().apply(this);
        outStart(node);
    }

    public void inAGrammar(AGrammar node)
    {
        defaultIn(node);
    }

    public void outAGrammar(AGrammar node)
    {
        defaultOut(node);
    }

    public void caseAGrammar(AGrammar node)
    {
        inAGrammar(node);
        {
            Object temp[] = node.getDeclarations().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDeclarations) temp[i]).apply(this);
            }
        }
        outAGrammar(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    public void caseAParams(AParams node)
    {
        inAParams(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParams(node);
    }

    public void inAParamEnd(AParamEnd node)
    {
        defaultIn(node);
    }

    public void outAParamEnd(AParamEnd node)
    {
        defaultOut(node);
    }

    public void caseAParamEnd(AParamEnd node)
    {
        inAParamEnd(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParamEnd(node);
    }

    public void inAFunctionName(AFunctionName node)
    {
        defaultIn(node);
    }

    public void outAFunctionName(AFunctionName node)
    {
        defaultOut(node);
    }

    public void caseAFunctionName(AFunctionName node)
    {
        inAFunctionName(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionName(node);
    }

    public void inALocalVar(ALocalVar node)
    {
        defaultIn(node);
    }

    public void outALocalVar(ALocalVar node)
    {
        defaultOut(node);
    }

    public void caseALocalVar(ALocalVar node)
    {
        inALocalVar(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outALocalVar(node);
    }

    public void inAGlobalVar(AGlobalVar node)
    {
        defaultIn(node);
    }

    public void outAGlobalVar(AGlobalVar node)
    {
        defaultOut(node);
    }

    public void caseAGlobalVar(AGlobalVar node)
    {
        inAGlobalVar(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAGlobalVar(node);
    }

    public void inACallParams(ACallParams node)
    {
        defaultIn(node);
    }

    public void outACallParams(ACallParams node)
    {
        defaultOut(node);
    }

    public void caseACallParams(ACallParams node)
    {
        inACallParams(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACallParams(node);
    }

    public void inACallParamsEnd(ACallParamsEnd node)
    {
        defaultIn(node);
    }

    public void outACallParamsEnd(ACallParamsEnd node)
    {
        defaultOut(node);
    }

    public void caseACallParamsEnd(ACallParamsEnd node)
    {
        inACallParamsEnd(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACallParamsEnd(node);
    }

    public void inAGlobalDeclarations(AGlobalDeclarations node)
    {
        defaultIn(node);
    }

    public void outAGlobalDeclarations(AGlobalDeclarations node)
    {
        defaultOut(node);
    }

    public void caseAGlobalDeclarations(AGlobalDeclarations node)
    {
        inAGlobalDeclarations(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getGlobalVar() != null)
        {
            node.getGlobalVar().apply(this);
        }
        if(node.getMcVar() != null)
        {
            node.getMcVar().apply(this);
        }
        outAGlobalDeclarations(node);
    }

    public void inAFunctionDeclarations(AFunctionDeclarations node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclarations(AFunctionDeclarations node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDeclarations(AFunctionDeclarations node)
    {
        inAFunctionDeclarations(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getParamEnd() != null)
        {
            node.getParamEnd().apply(this);
        }
        {
            Object temp[] = node.getParams().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PParams) temp[i]).apply(this);
            }
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFunctionName() != null)
        {
            node.getFunctionName().apply(this);
        }
        if(node.getMcFunction() != null)
        {
            node.getMcFunction().apply(this);
        }
        outAFunctionDeclarations(node);
    }

    public void inAPrintDeclarations(APrintDeclarations node)
    {
        defaultIn(node);
    }

    public void outAPrintDeclarations(APrintDeclarations node)
    {
        defaultOut(node);
    }

    public void caseAPrintDeclarations(APrintDeclarations node)
    {
        inAPrintDeclarations(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getMcPrint() != null)
        {
            node.getMcPrint().apply(this);
        }
        outAPrintDeclarations(node);
    }

    public void inAForDeclarations(AForDeclarations node)
    {
        defaultIn(node);
    }

    public void outAForDeclarations(AForDeclarations node)
    {
        defaultOut(node);
    }

    public void caseAForDeclarations(AForDeclarations node)
    {
        inAForDeclarations(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getMcPrint() != null)
        {
            node.getMcPrint().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getMcTo() != null)
        {
            node.getMcTo().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getMcFor() != null)
        {
            node.getMcFor().apply(this);
        }
        outAForDeclarations(node);
    }

    public void inAConditionExpression(AConditionExpression node)
    {
        defaultIn(node);
    }

    public void outAConditionExpression(AConditionExpression node)
    {
        defaultOut(node);
    }

    public void caseAConditionExpression(AConditionExpression node)
    {
        inAConditionExpression(node);
        if(node.getExprIfLet() != null)
        {
            node.getExprIfLet().apply(this);
        }
        outAConditionExpression(node);
    }

    public void inALogicExpression(ALogicExpression node)
    {
        defaultIn(node);
    }

    public void outALogicExpression(ALogicExpression node)
    {
        defaultOut(node);
    }

    public void caseALogicExpression(ALogicExpression node)
    {
        inALogicExpression(node);
        if(node.getExprLogic() != null)
        {
            node.getExprLogic().apply(this);
        }
        outALogicExpression(node);
    }

    public void inAIfExprIfLet(AIfExprIfLet node)
    {
        defaultIn(node);
    }

    public void outAIfExprIfLet(AIfExprIfLet node)
    {
        defaultOut(node);
    }

    public void caseAIfExprIfLet(AIfExprIfLet node)
    {
        inAIfExprIfLet(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getMcElse() != null)
        {
            node.getMcElse().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getMcThen() != null)
        {
            node.getMcThen().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getMcIf() != null)
        {
            node.getMcIf().apply(this);
        }
        outAIfExprIfLet(node);
    }

    public void inALetExprIfLet(ALetExprIfLet node)
    {
        defaultIn(node);
    }

    public void outALetExprIfLet(ALetExprIfLet node)
    {
        defaultOut(node);
    }

    public void caseALetExprIfLet(ALetExprIfLet node)
    {
        inALetExprIfLet(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getMcIn() != null)
        {
            node.getMcIn().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLocalVar() != null)
        {
            node.getLocalVar().apply(this);
        }
        if(node.getMcLet() != null)
        {
            node.getMcLet().apply(this);
        }
        outALetExprIfLet(node);
    }

    public void inAOrExprLogic(AOrExprLogic node)
    {
        defaultIn(node);
    }

    public void outAOrExprLogic(AOrExprLogic node)
    {
        defaultOut(node);
    }

    public void caseAOrExprLogic(AOrExprLogic node)
    {
        inAOrExprLogic(node);
        if(node.getExprComp() != null)
        {
            node.getExprComp().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExprLogic() != null)
        {
            node.getExprLogic().apply(this);
        }
        outAOrExprLogic(node);
    }

    public void inAAndExprLogic(AAndExprLogic node)
    {
        defaultIn(node);
    }

    public void outAAndExprLogic(AAndExprLogic node)
    {
        defaultOut(node);
    }

    public void caseAAndExprLogic(AAndExprLogic node)
    {
        inAAndExprLogic(node);
        if(node.getExprComp() != null)
        {
            node.getExprComp().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExprLogic() != null)
        {
            node.getExprLogic().apply(this);
        }
        outAAndExprLogic(node);
    }

    public void inAXorExprLogic(AXorExprLogic node)
    {
        defaultIn(node);
    }

    public void outAXorExprLogic(AXorExprLogic node)
    {
        defaultOut(node);
    }

    public void caseAXorExprLogic(AXorExprLogic node)
    {
        inAXorExprLogic(node);
        if(node.getExprComp() != null)
        {
            node.getExprComp().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getExprLogic() != null)
        {
            node.getExprLogic().apply(this);
        }
        outAXorExprLogic(node);
    }

    public void inAEmptyExprLogic(AEmptyExprLogic node)
    {
        defaultIn(node);
    }

    public void outAEmptyExprLogic(AEmptyExprLogic node)
    {
        defaultOut(node);
    }

    public void caseAEmptyExprLogic(AEmptyExprLogic node)
    {
        inAEmptyExprLogic(node);
        if(node.getExprComp() != null)
        {
            node.getExprComp().apply(this);
        }
        outAEmptyExprLogic(node);
    }

    public void inAEqualExprComp(AEqualExprComp node)
    {
        defaultIn(node);
    }

    public void outAEqualExprComp(AEqualExprComp node)
    {
        defaultOut(node);
    }

    public void caseAEqualExprComp(AEqualExprComp node)
    {
        inAEqualExprComp(node);
        if(node.getExprSum() != null)
        {
            node.getExprSum().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExprComp() != null)
        {
            node.getExprComp().apply(this);
        }
        outAEqualExprComp(node);
    }

    public void inALtExprComp(ALtExprComp node)
    {
        defaultIn(node);
    }

    public void outALtExprComp(ALtExprComp node)
    {
        defaultOut(node);
    }

    public void caseALtExprComp(ALtExprComp node)
    {
        inALtExprComp(node);
        if(node.getExprSum() != null)
        {
            node.getExprSum().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getExprComp() != null)
        {
            node.getExprComp().apply(this);
        }
        outALtExprComp(node);
    }

    public void inALteqExprComp(ALteqExprComp node)
    {
        defaultIn(node);
    }

    public void outALteqExprComp(ALteqExprComp node)
    {
        defaultOut(node);
    }

    public void caseALteqExprComp(ALteqExprComp node)
    {
        inALteqExprComp(node);
        if(node.getExprSum() != null)
        {
            node.getExprSum().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getExprComp() != null)
        {
            node.getExprComp().apply(this);
        }
        outALteqExprComp(node);
    }

    public void inAGtExprComp(AGtExprComp node)
    {
        defaultIn(node);
    }

    public void outAGtExprComp(AGtExprComp node)
    {
        defaultOut(node);
    }

    public void caseAGtExprComp(AGtExprComp node)
    {
        inAGtExprComp(node);
        if(node.getExprSum() != null)
        {
            node.getExprSum().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getExprComp() != null)
        {
            node.getExprComp().apply(this);
        }
        outAGtExprComp(node);
    }

    public void inAGteqExprComp(AGteqExprComp node)
    {
        defaultIn(node);
    }

    public void outAGteqExprComp(AGteqExprComp node)
    {
        defaultOut(node);
    }

    public void caseAGteqExprComp(AGteqExprComp node)
    {
        inAGteqExprComp(node);
        if(node.getExprSum() != null)
        {
            node.getExprSum().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getExprComp() != null)
        {
            node.getExprComp().apply(this);
        }
        outAGteqExprComp(node);
    }

    public void inAEmptyExprComp(AEmptyExprComp node)
    {
        defaultIn(node);
    }

    public void outAEmptyExprComp(AEmptyExprComp node)
    {
        defaultOut(node);
    }

    public void caseAEmptyExprComp(AEmptyExprComp node)
    {
        inAEmptyExprComp(node);
        if(node.getExprSum() != null)
        {
            node.getExprSum().apply(this);
        }
        outAEmptyExprComp(node);
    }

    public void inAPlusExprSum(APlusExprSum node)
    {
        defaultIn(node);
    }

    public void outAPlusExprSum(APlusExprSum node)
    {
        defaultOut(node);
    }

    public void caseAPlusExprSum(APlusExprSum node)
    {
        inAPlusExprSum(node);
        if(node.getExprProduct() != null)
        {
            node.getExprProduct().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExprSum() != null)
        {
            node.getExprSum().apply(this);
        }
        outAPlusExprSum(node);
    }

    public void inAMinusExprSum(AMinusExprSum node)
    {
        defaultIn(node);
    }

    public void outAMinusExprSum(AMinusExprSum node)
    {
        defaultOut(node);
    }

    public void caseAMinusExprSum(AMinusExprSum node)
    {
        inAMinusExprSum(node);
        if(node.getExprProduct() != null)
        {
            node.getExprProduct().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExprSum() != null)
        {
            node.getExprSum().apply(this);
        }
        outAMinusExprSum(node);
    }

    public void inAEmptyExprSum(AEmptyExprSum node)
    {
        defaultIn(node);
    }

    public void outAEmptyExprSum(AEmptyExprSum node)
    {
        defaultOut(node);
    }

    public void caseAEmptyExprSum(AEmptyExprSum node)
    {
        inAEmptyExprSum(node);
        if(node.getExprProduct() != null)
        {
            node.getExprProduct().apply(this);
        }
        outAEmptyExprSum(node);
    }

    public void inAMultExprProduct(AMultExprProduct node)
    {
        defaultIn(node);
    }

    public void outAMultExprProduct(AMultExprProduct node)
    {
        defaultOut(node);
    }

    public void caseAMultExprProduct(AMultExprProduct node)
    {
        inAMultExprProduct(node);
        if(node.getExprUnary() != null)
        {
            node.getExprUnary().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExprProduct() != null)
        {
            node.getExprProduct().apply(this);
        }
        outAMultExprProduct(node);
    }

    public void inADivExprProduct(ADivExprProduct node)
    {
        defaultIn(node);
    }

    public void outADivExprProduct(ADivExprProduct node)
    {
        defaultOut(node);
    }

    public void caseADivExprProduct(ADivExprProduct node)
    {
        inADivExprProduct(node);
        if(node.getExprUnary() != null)
        {
            node.getExprUnary().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExprProduct() != null)
        {
            node.getExprProduct().apply(this);
        }
        outADivExprProduct(node);
    }

    public void inAModExprProduct(AModExprProduct node)
    {
        defaultIn(node);
    }

    public void outAModExprProduct(AModExprProduct node)
    {
        defaultOut(node);
    }

    public void caseAModExprProduct(AModExprProduct node)
    {
        inAModExprProduct(node);
        if(node.getExprUnary() != null)
        {
            node.getExprUnary().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getExprProduct() != null)
        {
            node.getExprProduct().apply(this);
        }
        outAModExprProduct(node);
    }

    public void inAEmptyExprProduct(AEmptyExprProduct node)
    {
        defaultIn(node);
    }

    public void outAEmptyExprProduct(AEmptyExprProduct node)
    {
        defaultOut(node);
    }

    public void caseAEmptyExprProduct(AEmptyExprProduct node)
    {
        inAEmptyExprProduct(node);
        if(node.getExprUnary() != null)
        {
            node.getExprUnary().apply(this);
        }
        outAEmptyExprProduct(node);
    }

    public void inAExprUnary(AExprUnary node)
    {
        defaultIn(node);
    }

    public void outAExprUnary(AExprUnary node)
    {
        defaultOut(node);
    }

    public void caseAExprUnary(AExprUnary node)
    {
        inAExprUnary(node);
        if(node.getExprSimple() != null)
        {
            node.getExprSimple().apply(this);
        }
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        outAExprUnary(node);
    }

    public void inAParExprSimple(AParExprSimple node)
    {
        defaultIn(node);
    }

    public void outAParExprSimple(AParExprSimple node)
    {
        defaultOut(node);
    }

    public void caseAParExprSimple(AParExprSimple node)
    {
        inAParExprSimple(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParExprSimple(node);
    }

    public void inABracketExprSimple(ABracketExprSimple node)
    {
        defaultIn(node);
    }

    public void outABracketExprSimple(ABracketExprSimple node)
    {
        defaultOut(node);
    }

    public void caseABracketExprSimple(ABracketExprSimple node)
    {
        inABracketExprSimple(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outABracketExprSimple(node);
    }

    public void inAConstantsExprSimple(AConstantsExprSimple node)
    {
        defaultIn(node);
    }

    public void outAConstantsExprSimple(AConstantsExprSimple node)
    {
        defaultOut(node);
    }

    public void caseAConstantsExprSimple(AConstantsExprSimple node)
    {
        inAConstantsExprSimple(node);
        if(node.getConstants() != null)
        {
            node.getConstants().apply(this);
        }
        outAConstantsExprSimple(node);
    }

    public void inATextExprSimple(ATextExprSimple node)
    {
        defaultIn(node);
    }

    public void outATextExprSimple(ATextExprSimple node)
    {
        defaultOut(node);
    }

    public void caseATextExprSimple(ATextExprSimple node)
    {
        inATextExprSimple(node);
        if(node.getTexte() != null)
        {
            node.getTexte().apply(this);
        }
        outATextExprSimple(node);
    }

    public void inACallExprSimple(ACallExprSimple node)
    {
        defaultIn(node);
    }

    public void outACallExprSimple(ACallExprSimple node)
    {
        defaultOut(node);
    }

    public void caseACallExprSimple(ACallExprSimple node)
    {
        inACallExprSimple(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getCallParamsEnd() != null)
        {
            node.getCallParamsEnd().apply(this);
        }
        {
            Object temp[] = node.getCallParams().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCallParams) temp[i]).apply(this);
            }
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACallExprSimple(node);
    }

    public void inAIdExprSimple(AIdExprSimple node)
    {
        defaultIn(node);
    }

    public void outAIdExprSimple(AIdExprSimple node)
    {
        defaultOut(node);
    }

    public void caseAIdExprSimple(AIdExprSimple node)
    {
        inAIdExprSimple(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExprSimple(node);
    }

    public void inAIntConstants(AIntConstants node)
    {
        defaultIn(node);
    }

    public void outAIntConstants(AIntConstants node)
    {
        defaultOut(node);
    }

    public void caseAIntConstants(AIntConstants node)
    {
        inAIntConstants(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntConstants(node);
    }

    public void inAFloatConstants(AFloatConstants node)
    {
        defaultIn(node);
    }

    public void outAFloatConstants(AFloatConstants node)
    {
        defaultOut(node);
    }

    public void caseAFloatConstants(AFloatConstants node)
    {
        inAFloatConstants(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatConstants(node);
    }

    public void inABoolConstants(ABoolConstants node)
    {
        defaultIn(node);
    }

    public void outABoolConstants(ABoolConstants node)
    {
        defaultOut(node);
    }

    public void caseABoolConstants(ABoolConstants node)
    {
        inABoolConstants(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolConstants(node);
    }

    public void inAPlusUnaryOp(APlusUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusUnaryOp(APlusUnaryOp node)
    {
        defaultOut(node);
    }

    public void caseAPlusUnaryOp(APlusUnaryOp node)
    {
        inAPlusUnaryOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusUnaryOp(node);
    }

    public void inASubUnaryOp(ASubUnaryOp node)
    {
        defaultIn(node);
    }

    public void outASubUnaryOp(ASubUnaryOp node)
    {
        defaultOut(node);
    }

    public void caseASubUnaryOp(ASubUnaryOp node)
    {
        inASubUnaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outASubUnaryOp(node);
    }

    public void inANotUnaryOp(ANotUnaryOp node)
    {
        defaultIn(node);
    }

    public void outANotUnaryOp(ANotUnaryOp node)
    {
        defaultOut(node);
    }

    public void caseANotUnaryOp(ANotUnaryOp node)
    {
        inANotUnaryOp(node);
        if(node.getMcNot() != null)
        {
            node.getMcNot().apply(this);
        }
        outANotUnaryOp(node);
    }
}
