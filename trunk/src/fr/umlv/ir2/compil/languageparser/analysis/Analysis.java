/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.analysis;

import fr.umlv.ir2.compil.languageparser.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGrammar(AGrammar node);
    void caseAParams(AParams node);
    void caseAParamEnd(AParamEnd node);
    void caseAFunctionName(AFunctionName node);
    void caseALocalVar(ALocalVar node);
    void caseAGlobalVar(AGlobalVar node);
    void caseACallParams(ACallParams node);
    void caseACallParamsEnd(ACallParamsEnd node);
    void caseAGlobalDeclarations(AGlobalDeclarations node);
    void caseAFunctionDeclarations(AFunctionDeclarations node);
    void caseAPrintDeclarations(APrintDeclarations node);
    void caseAForDeclarations(AForDeclarations node);
    void caseAConditionExpression(AConditionExpression node);
    void caseALogicExpression(ALogicExpression node);
    void caseAIfExprIfLet(AIfExprIfLet node);
    void caseALetExprIfLet(ALetExprIfLet node);
    void caseAOrExprLogic(AOrExprLogic node);
    void caseAAndExprLogic(AAndExprLogic node);
    void caseAXorExprLogic(AXorExprLogic node);
    void caseAEmptyExprLogic(AEmptyExprLogic node);
    void caseAEqualExprComp(AEqualExprComp node);
    void caseALtExprComp(ALtExprComp node);
    void caseALteqExprComp(ALteqExprComp node);
    void caseAGtExprComp(AGtExprComp node);
    void caseAGteqExprComp(AGteqExprComp node);
    void caseAEmptyExprComp(AEmptyExprComp node);
    void caseAPlusExprSum(APlusExprSum node);
    void caseAMinusExprSum(AMinusExprSum node);
    void caseAEmptyExprSum(AEmptyExprSum node);
    void caseAMultExprProduct(AMultExprProduct node);
    void caseADivExprProduct(ADivExprProduct node);
    void caseAModExprProduct(AModExprProduct node);
    void caseAEmptyExprProduct(AEmptyExprProduct node);
    void caseAExprUnary(AExprUnary node);
    void caseAParExprSimple(AParExprSimple node);
    void caseABracketExprSimple(ABracketExprSimple node);
    void caseAConstantsExprSimple(AConstantsExprSimple node);
    void caseATextExprSimple(ATextExprSimple node);
    void caseACallExprSimple(ACallExprSimple node);
    void caseAIdExprSimple(AIdExprSimple node);
    void caseAIntConstants(AIntConstants node);
    void caseAFloatConstants(AFloatConstants node);
    void caseABoolConstants(ABoolConstants node);
    void caseAPlusUnaryOp(APlusUnaryOp node);
    void caseASubUnaryOp(ASubUnaryOp node);
    void caseANotUnaryOp(ANotUnaryOp node);

    void caseTMcVar(TMcVar node);
    void caseTMcFunction(TMcFunction node);
    void caseTMcPrint(TMcPrint node);
    void caseTMcFor(TMcFor node);
    void caseTMcTo(TMcTo node);
    void caseTMcInt(TMcInt node);
    void caseTMcFloat(TMcFloat node);
    void caseTMcBool(TMcBool node);
    void caseTMcIf(TMcIf node);
    void caseTMcThen(TMcThen node);
    void caseTMcElse(TMcElse node);
    void caseTMcLet(TMcLet node);
    void caseTMcIn(TMcIn node);
    void caseTMcNot(TMcNot node);
    void caseTType(TType node);
    void caseTInt(TInt node);
    void caseTFloat(TFloat node);
    void caseTBool(TBool node);
    void caseTId(TId node);
    void caseTEqual(TEqual node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTSemicolon(TSemicolon node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTComma(TComma node);
    void caseTLt(TLt node);
    void caseTLteq(TLteq node);
    void caseTGt(TGt node);
    void caseTGteq(TGteq node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTTexte(TTexte node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
}
