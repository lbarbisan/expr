/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.analysis;

import java.util.*;
import fr.umlv.ir2.compil.languageparser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGrammar(AGrammar node)
    {
        defaultCase(node);
    }

    public void caseAParams(AParams node)
    {
        defaultCase(node);
    }

    public void caseAParamEnd(AParamEnd node)
    {
        defaultCase(node);
    }

    public void caseAFunctionName(AFunctionName node)
    {
        defaultCase(node);
    }

    public void caseALocalVar(ALocalVar node)
    {
        defaultCase(node);
    }

    public void caseAGlobalVar(AGlobalVar node)
    {
        defaultCase(node);
    }

    public void caseACallParams(ACallParams node)
    {
        defaultCase(node);
    }

    public void caseACallParamsEnd(ACallParamsEnd node)
    {
        defaultCase(node);
    }

    public void caseAGlobalDeclarations(AGlobalDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDeclarations(AFunctionDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAPrintDeclarations(APrintDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAForDeclarations(AForDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAConditionExpression(AConditionExpression node)
    {
        defaultCase(node);
    }

    public void caseALogicExpression(ALogicExpression node)
    {
        defaultCase(node);
    }

    public void caseAIfExprIfLet(AIfExprIfLet node)
    {
        defaultCase(node);
    }

    public void caseALetExprIfLet(ALetExprIfLet node)
    {
        defaultCase(node);
    }

    public void caseAOrExprLogic(AOrExprLogic node)
    {
        defaultCase(node);
    }

    public void caseAAndExprLogic(AAndExprLogic node)
    {
        defaultCase(node);
    }

    public void caseAXorExprLogic(AXorExprLogic node)
    {
        defaultCase(node);
    }

    public void caseAEmptyExprLogic(AEmptyExprLogic node)
    {
        defaultCase(node);
    }

    public void caseAEqualExprComp(AEqualExprComp node)
    {
        defaultCase(node);
    }

    public void caseALtExprComp(ALtExprComp node)
    {
        defaultCase(node);
    }

    public void caseALteqExprComp(ALteqExprComp node)
    {
        defaultCase(node);
    }

    public void caseAGtExprComp(AGtExprComp node)
    {
        defaultCase(node);
    }

    public void caseAGteqExprComp(AGteqExprComp node)
    {
        defaultCase(node);
    }

    public void caseAEmptyExprComp(AEmptyExprComp node)
    {
        defaultCase(node);
    }

    public void caseAPlusExprSum(APlusExprSum node)
    {
        defaultCase(node);
    }

    public void caseAMinusExprSum(AMinusExprSum node)
    {
        defaultCase(node);
    }

    public void caseAEmptyExprSum(AEmptyExprSum node)
    {
        defaultCase(node);
    }

    public void caseAMultExprProduct(AMultExprProduct node)
    {
        defaultCase(node);
    }

    public void caseADivExprProduct(ADivExprProduct node)
    {
        defaultCase(node);
    }

    public void caseAModExprProduct(AModExprProduct node)
    {
        defaultCase(node);
    }

    public void caseAEmptyExprProduct(AEmptyExprProduct node)
    {
        defaultCase(node);
    }

    public void caseAExprUnary(AExprUnary node)
    {
        defaultCase(node);
    }

    public void caseAParExprSimple(AParExprSimple node)
    {
        defaultCase(node);
    }

    public void caseABracketExprSimple(ABracketExprSimple node)
    {
        defaultCase(node);
    }

    public void caseAConstantsExprSimple(AConstantsExprSimple node)
    {
        defaultCase(node);
    }

    public void caseATextExprSimple(ATextExprSimple node)
    {
        defaultCase(node);
    }

    public void caseACallExprSimple(ACallExprSimple node)
    {
        defaultCase(node);
    }

    public void caseAIdExprSimple(AIdExprSimple node)
    {
        defaultCase(node);
    }

    public void caseAIntConstants(AIntConstants node)
    {
        defaultCase(node);
    }

    public void caseAFloatConstants(AFloatConstants node)
    {
        defaultCase(node);
    }

    public void caseABoolConstants(ABoolConstants node)
    {
        defaultCase(node);
    }

    public void caseAPlusUnaryOp(APlusUnaryOp node)
    {
        defaultCase(node);
    }

    public void caseASubUnaryOp(ASubUnaryOp node)
    {
        defaultCase(node);
    }

    public void caseANotUnaryOp(ANotUnaryOp node)
    {
        defaultCase(node);
    }

    public void caseTMcVar(TMcVar node)
    {
        defaultCase(node);
    }

    public void caseTMcFunction(TMcFunction node)
    {
        defaultCase(node);
    }

    public void caseTMcPrint(TMcPrint node)
    {
        defaultCase(node);
    }

    public void caseTMcFor(TMcFor node)
    {
        defaultCase(node);
    }

    public void caseTMcTo(TMcTo node)
    {
        defaultCase(node);
    }

    public void caseTMcInt(TMcInt node)
    {
        defaultCase(node);
    }

    public void caseTMcFloat(TMcFloat node)
    {
        defaultCase(node);
    }

    public void caseTMcBool(TMcBool node)
    {
        defaultCase(node);
    }

    public void caseTMcIf(TMcIf node)
    {
        defaultCase(node);
    }

    public void caseTMcThen(TMcThen node)
    {
        defaultCase(node);
    }

    public void caseTMcElse(TMcElse node)
    {
        defaultCase(node);
    }

    public void caseTMcLet(TMcLet node)
    {
        defaultCase(node);
    }

    public void caseTMcIn(TMcIn node)
    {
        defaultCase(node);
    }

    public void caseTMcNot(TMcNot node)
    {
        defaultCase(node);
    }

    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    public void caseTTexte(TTexte node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
