/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.parser;

import fr.umlv.ir2.compil.languageparser.lexer.*;
import fr.umlv.ir2.compil.languageparser.node.*;
import fr.umlv.ir2.compil.languageparser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(0), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(19), node, false); } break;
                    case 3: { Node node = new3(); push(goTo(19), node, false); } break;
                    case 4: { Node node = new4(); push(goTo(1), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(1), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(2), node, true); } break;
                    case 7: { Node node = new7(); push(goTo(2), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(3), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(3), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(4), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(4), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(5), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(5), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(6), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(7), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(8), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(8), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(8), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(20), node, false); } break;
                    case 20: { Node node = new20(); push(goTo(20), node, false); } break;
                    case 21: { Node node = new21(); push(goTo(8), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(8), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(8), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(8), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(9), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(9), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(10), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(10), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(11), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(11), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(11), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(11), node, true); } break;
                    case 33: { Node node = new33(); push(goTo(12), node, true); } break;
                    case 34: { Node node = new34(); push(goTo(12), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(12), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(12), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(12), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(12), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(13), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(13), node, true); } break;
                    case 41: { Node node = new41(); push(goTo(13), node, true); } break;
                    case 42: { Node node = new42(); push(goTo(14), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(14), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(14), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(14), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(15), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(15), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(16), node, true); } break;
                    case 49: { Node node = new49(); push(goTo(16), node, true); } break;
                    case 50: { Node node = new50(); push(goTo(16), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(16), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(16), node, true); } break;
                    case 53: { Node node = new53(); push(goTo(16), node, true); } break;
                    case 54: { Node node = new54(); push(goTo(21), node, false); } break;
                    case 55: { Node node = new55(); push(goTo(21), node, false); } break;
                    case 56: { Node node = new56(); push(goTo(16), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(16), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(16), node, true); } break;
                    case 59: { Node node = new59(); push(goTo(17), node, true); } break;
                    case 60: { Node node = new60(); push(goTo(17), node, true); } break;
                    case 61: { Node node = new61(); push(goTo(17), node, true); } break;
                    case 62: { Node node = new62(); push(goTo(18), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(18), node, true); } break;
                    case 64: { Node node = new64(); push(goTo(18), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGrammar node1 = (PGrammar) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        XPDeclarations node1 = null;
        AGrammar node = new AGrammar(node1);
        return node;
    }

    Node new1()
    {
        XPDeclarations node1 = (XPDeclarations) pop();
        AGrammar node = new AGrammar(node1);
        return node;
    }

    Node new2()
    {
        PDeclarations node2 = (PDeclarations) pop();
        XPDeclarations node1 = (XPDeclarations) pop();
        X1PDeclarations node = new X1PDeclarations(node1, node2);
        return node;
    }

    Node new3()
    {
        PDeclarations node1 = (PDeclarations) pop();
        X2PDeclarations node = new X2PDeclarations(node1);
        return node;
    }

    Node new4()
    {
        TComma node3 = (TComma) pop();
        TType node2 = null;
        TId node1 = (TId) pop();
        AParams node = new AParams(node1, node2, node3);
        return node;
    }

    Node new5()
    {
        TComma node3 = (TComma) pop();
        TType node2 = (TType) pop();
        TId node1 = (TId) pop();
        AParams node = new AParams(node1, node2, node3);
        return node;
    }

    Node new6()
    {
        TType node2 = null;
        TId node1 = (TId) pop();
        AParamEnd node = new AParamEnd(node1, node2);
        return node;
    }

    Node new7()
    {
        TType node2 = (TType) pop();
        TId node1 = (TId) pop();
        AParamEnd node = new AParamEnd(node1, node2);
        return node;
    }

    Node new8()
    {
        TType node2 = null;
        TId node1 = (TId) pop();
        AFunctionName node = new AFunctionName(node1, node2);
        return node;
    }

    Node new9()
    {
        TType node2 = (TType) pop();
        TId node1 = (TId) pop();
        AFunctionName node = new AFunctionName(node1, node2);
        return node;
    }

    Node new10()
    {
        TType node2 = null;
        TId node1 = (TId) pop();
        ALocalVar node = new ALocalVar(node1, node2);
        return node;
    }

    Node new11()
    {
        TType node2 = (TType) pop();
        TId node1 = (TId) pop();
        ALocalVar node = new ALocalVar(node1, node2);
        return node;
    }

    Node new12()
    {
        TType node2 = null;
        TId node1 = (TId) pop();
        AGlobalVar node = new AGlobalVar(node1, node2);
        return node;
    }

    Node new13()
    {
        TType node2 = (TType) pop();
        TId node1 = (TId) pop();
        AGlobalVar node = new AGlobalVar(node1, node2);
        return node;
    }

    Node new14()
    {
        TComma node2 = (TComma) pop();
        PExpression node1 = (PExpression) pop();
        ACallParams node = new ACallParams(node1, node2);
        return node;
    }

    Node new15()
    {
        PExpression node1 = (PExpression) pop();
        ACallParamsEnd node = new ACallParamsEnd(node1);
        return node;
    }

    Node new16()
    {
        TSemicolon node5 = (TSemicolon) pop();
        PExpression node4 = (PExpression) pop();
        TEqual node3 = (TEqual) pop();
        PGlobalVar node2 = (PGlobalVar) pop();
        TMcVar node1 = (TMcVar) pop();
        AGlobalDeclarations node = new AGlobalDeclarations(node1, node2, node3, node4, node5);
        return node;
    }

    Node new17()
    {
        TSemicolon node10 = (TSemicolon) pop();
        PExpression node9 = (PExpression) pop();
        TEqual node8 = (TEqual) pop();
        TType node7 = null;
        TRPar node6 = (TRPar) pop();
        PParamEnd node5 = (PParamEnd) pop();
        XPParams node4 = null;
        TLPar node3 = (TLPar) pop();
        PFunctionName node2 = (PFunctionName) pop();
        TMcFunction node1 = (TMcFunction) pop();
        AFunctionDeclarations node = new AFunctionDeclarations(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new18()
    {
        TSemicolon node10 = (TSemicolon) pop();
        PExpression node9 = (PExpression) pop();
        TEqual node8 = (TEqual) pop();
        TType node7 = null;
        TRPar node6 = (TRPar) pop();
        PParamEnd node5 = (PParamEnd) pop();
        XPParams node4 = (XPParams) pop();
        TLPar node3 = (TLPar) pop();
        PFunctionName node2 = (PFunctionName) pop();
        TMcFunction node1 = (TMcFunction) pop();
        AFunctionDeclarations node = new AFunctionDeclarations(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new19()
    {
        PParams node2 = (PParams) pop();
        XPParams node1 = (XPParams) pop();
        X1PParams node = new X1PParams(node1, node2);
        return node;
    }

    Node new20()
    {
        PParams node1 = (PParams) pop();
        X2PParams node = new X2PParams(node1);
        return node;
    }

    Node new21()
    {
        TSemicolon node10 = (TSemicolon) pop();
        PExpression node9 = (PExpression) pop();
        TEqual node8 = (TEqual) pop();
        TType node7 = (TType) pop();
        TRPar node6 = (TRPar) pop();
        PParamEnd node5 = (PParamEnd) pop();
        XPParams node4 = null;
        TLPar node3 = (TLPar) pop();
        PFunctionName node2 = (PFunctionName) pop();
        TMcFunction node1 = (TMcFunction) pop();
        AFunctionDeclarations node = new AFunctionDeclarations(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new22()
    {
        TSemicolon node10 = (TSemicolon) pop();
        PExpression node9 = (PExpression) pop();
        TEqual node8 = (TEqual) pop();
        TType node7 = (TType) pop();
        TRPar node6 = (TRPar) pop();
        PParamEnd node5 = (PParamEnd) pop();
        XPParams node4 = (XPParams) pop();
        TLPar node3 = (TLPar) pop();
        PFunctionName node2 = (PFunctionName) pop();
        TMcFunction node1 = (TMcFunction) pop();
        AFunctionDeclarations node = new AFunctionDeclarations(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new23()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PExpression node2 = (PExpression) pop();
        TMcPrint node1 = (TMcPrint) pop();
        APrintDeclarations node = new APrintDeclarations(node1, node2, node3);
        return node;
    }

    Node new24()
    {
        TSemicolon node9 = (TSemicolon) pop();
        PExpression node8 = (PExpression) pop();
        TMcPrint node7 = (TMcPrint) pop();
        PExpression node6 = (PExpression) pop();
        TMcTo node5 = (TMcTo) pop();
        PExpression node4 = (PExpression) pop();
        TEqual node3 = (TEqual) pop();
        TId node2 = (TId) pop();
        TMcFor node1 = (TMcFor) pop();
        AForDeclarations node = new AForDeclarations(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new25()
    {
        PExprIfLet node1 = (PExprIfLet) pop();
        AConditionExpression node = new AConditionExpression(node1);
        return node;
    }

    Node new26()
    {
        PExprLogic node1 = (PExprLogic) pop();
        ALogicExpression node = new ALogicExpression(node1);
        return node;
    }

    Node new27()
    {
        PExpression node6 = (PExpression) pop();
        TMcElse node5 = (TMcElse) pop();
        PExpression node4 = (PExpression) pop();
        TMcThen node3 = (TMcThen) pop();
        PExpression node2 = (PExpression) pop();
        TMcIf node1 = (TMcIf) pop();
        AIfExprIfLet node = new AIfExprIfLet(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new28()
    {
        PExpression node6 = (PExpression) pop();
        TMcIn node5 = (TMcIn) pop();
        PExpression node4 = (PExpression) pop();
        TEqual node3 = (TEqual) pop();
        PLocalVar node2 = (PLocalVar) pop();
        TMcLet node1 = (TMcLet) pop();
        ALetExprIfLet node = new ALetExprIfLet(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new29()
    {
        PExprComp node3 = (PExprComp) pop();
        TOr node2 = (TOr) pop();
        PExprLogic node1 = (PExprLogic) pop();
        AOrExprLogic node = new AOrExprLogic(node1, node2, node3);
        return node;
    }

    Node new30()
    {
        PExprComp node3 = (PExprComp) pop();
        TAnd node2 = (TAnd) pop();
        PExprLogic node1 = (PExprLogic) pop();
        AAndExprLogic node = new AAndExprLogic(node1, node2, node3);
        return node;
    }

    Node new31()
    {
        PExprComp node3 = (PExprComp) pop();
        TXor node2 = (TXor) pop();
        PExprLogic node1 = (PExprLogic) pop();
        AXorExprLogic node = new AXorExprLogic(node1, node2, node3);
        return node;
    }

    Node new32()
    {
        PExprComp node1 = (PExprComp) pop();
        AEmptyExprLogic node = new AEmptyExprLogic(node1);
        return node;
    }

    Node new33()
    {
        PExprSum node3 = (PExprSum) pop();
        TEqual node2 = (TEqual) pop();
        PExprComp node1 = (PExprComp) pop();
        AEqualExprComp node = new AEqualExprComp(node1, node2, node3);
        return node;
    }

    Node new34()
    {
        PExprSum node3 = (PExprSum) pop();
        TLt node2 = (TLt) pop();
        PExprComp node1 = (PExprComp) pop();
        ALtExprComp node = new ALtExprComp(node1, node2, node3);
        return node;
    }

    Node new35()
    {
        PExprSum node3 = (PExprSum) pop();
        TLteq node2 = (TLteq) pop();
        PExprComp node1 = (PExprComp) pop();
        ALteqExprComp node = new ALteqExprComp(node1, node2, node3);
        return node;
    }

    Node new36()
    {
        PExprSum node3 = (PExprSum) pop();
        TGt node2 = (TGt) pop();
        PExprComp node1 = (PExprComp) pop();
        AGtExprComp node = new AGtExprComp(node1, node2, node3);
        return node;
    }

    Node new37()
    {
        PExprSum node3 = (PExprSum) pop();
        TGteq node2 = (TGteq) pop();
        PExprComp node1 = (PExprComp) pop();
        AGteqExprComp node = new AGteqExprComp(node1, node2, node3);
        return node;
    }

    Node new38()
    {
        PExprSum node1 = (PExprSum) pop();
        AEmptyExprComp node = new AEmptyExprComp(node1);
        return node;
    }

    Node new39()
    {
        PExprProduct node3 = (PExprProduct) pop();
        TPlus node2 = (TPlus) pop();
        PExprSum node1 = (PExprSum) pop();
        APlusExprSum node = new APlusExprSum(node1, node2, node3);
        return node;
    }

    Node new40()
    {
        PExprProduct node3 = (PExprProduct) pop();
        TMinus node2 = (TMinus) pop();
        PExprSum node1 = (PExprSum) pop();
        AMinusExprSum node = new AMinusExprSum(node1, node2, node3);
        return node;
    }

    Node new41()
    {
        PExprProduct node1 = (PExprProduct) pop();
        AEmptyExprSum node = new AEmptyExprSum(node1);
        return node;
    }

    Node new42()
    {
        PExprUnary node3 = (PExprUnary) pop();
        TMult node2 = (TMult) pop();
        PExprProduct node1 = (PExprProduct) pop();
        AMultExprProduct node = new AMultExprProduct(node1, node2, node3);
        return node;
    }

    Node new43()
    {
        PExprUnary node3 = (PExprUnary) pop();
        TDiv node2 = (TDiv) pop();
        PExprProduct node1 = (PExprProduct) pop();
        ADivExprProduct node = new ADivExprProduct(node1, node2, node3);
        return node;
    }

    Node new44()
    {
        PExprUnary node3 = (PExprUnary) pop();
        TMod node2 = (TMod) pop();
        PExprProduct node1 = (PExprProduct) pop();
        AModExprProduct node = new AModExprProduct(node1, node2, node3);
        return node;
    }

    Node new45()
    {
        PExprUnary node1 = (PExprUnary) pop();
        AEmptyExprProduct node = new AEmptyExprProduct(node1);
        return node;
    }

    Node new46()
    {
        PExprSimple node2 = (PExprSimple) pop();
        PUnaryOp node1 = null;
        AExprUnary node = new AExprUnary(node1, node2);
        return node;
    }

    Node new47()
    {
        PExprSimple node2 = (PExprSimple) pop();
        PUnaryOp node1 = (PUnaryOp) pop();
        AExprUnary node = new AExprUnary(node1, node2);
        return node;
    }

    Node new48()
    {
        TRPar node3 = (TRPar) pop();
        PExpression node2 = (PExpression) pop();
        TLPar node1 = (TLPar) pop();
        AParExprSimple node = new AParExprSimple(node1, node2, node3);
        return node;
    }

    Node new49()
    {
        TRBracket node3 = (TRBracket) pop();
        PExpression node2 = (PExpression) pop();
        TLBracket node1 = (TLBracket) pop();
        ABracketExprSimple node = new ABracketExprSimple(node1, node2, node3);
        return node;
    }

    Node new50()
    {
        PConstants node1 = (PConstants) pop();
        AConstantsExprSimple node = new AConstantsExprSimple(node1);
        return node;
    }

    Node new51()
    {
        TTexte node1 = (TTexte) pop();
        ATextExprSimple node = new ATextExprSimple(node1);
        return node;
    }

    Node new52()
    {
        TRPar node5 = (TRPar) pop();
        PCallParamsEnd node4 = null;
        XPCallParams node3 = null;
        TLPar node2 = (TLPar) pop();
        TId node1 = (TId) pop();
        ACallExprSimple node = new ACallExprSimple(node1, node2, node3, node4, node5);
        return node;
    }

    Node new53()
    {
        TRPar node5 = (TRPar) pop();
        PCallParamsEnd node4 = null;
        XPCallParams node3 = (XPCallParams) pop();
        TLPar node2 = (TLPar) pop();
        TId node1 = (TId) pop();
        ACallExprSimple node = new ACallExprSimple(node1, node2, node3, node4, node5);
        return node;
    }

    Node new54()
    {
        PCallParams node2 = (PCallParams) pop();
        XPCallParams node1 = (XPCallParams) pop();
        X1PCallParams node = new X1PCallParams(node1, node2);
        return node;
    }

    Node new55()
    {
        PCallParams node1 = (PCallParams) pop();
        X2PCallParams node = new X2PCallParams(node1);
        return node;
    }

    Node new56()
    {
        TRPar node5 = (TRPar) pop();
        PCallParamsEnd node4 = (PCallParamsEnd) pop();
        XPCallParams node3 = null;
        TLPar node2 = (TLPar) pop();
        TId node1 = (TId) pop();
        ACallExprSimple node = new ACallExprSimple(node1, node2, node3, node4, node5);
        return node;
    }

    Node new57()
    {
        TRPar node5 = (TRPar) pop();
        PCallParamsEnd node4 = (PCallParamsEnd) pop();
        XPCallParams node3 = (XPCallParams) pop();
        TLPar node2 = (TLPar) pop();
        TId node1 = (TId) pop();
        ACallExprSimple node = new ACallExprSimple(node1, node2, node3, node4, node5);
        return node;
    }

    Node new58()
    {
        TId node1 = (TId) pop();
        AIdExprSimple node = new AIdExprSimple(node1);
        return node;
    }

    Node new59()
    {
        TInt node1 = (TInt) pop();
        AIntConstants node = new AIntConstants(node1);
        return node;
    }

    Node new60()
    {
        TFloat node1 = (TFloat) pop();
        AFloatConstants node = new AFloatConstants(node1);
        return node;
    }

    Node new61()
    {
        TBool node1 = (TBool) pop();
        ABoolConstants node = new ABoolConstants(node1);
        return node;
    }

    Node new62()
    {
        TPlus node1 = (TPlus) pop();
        APlusUnaryOp node = new APlusUnaryOp(node1);
        return node;
    }

    Node new63()
    {
        TMinus node1 = (TMinus) pop();
        ASubUnaryOp node = new ASubUnaryOp(node1);
        return node;
    }

    Node new64()
    {
        TMcNot node1 = (TMcNot) pop();
        ANotUnaryOp node = new ANotUnaryOp(node1);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, },
			{{-1, ERROR, 1}, {18, SHIFT, 8}, },
			{{-1, ERROR, 2}, {18, SHIFT, 10}, },
			{{-1, ERROR, 3}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 4}, {18, SHIFT, 34}, },
			{{-1, ERROR, 5}, {39, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, },
			{{-1, REDUCE, 12}, {14, SHIFT, 36}, },
			{{-1, ERROR, 9}, {19, SHIFT, 37}, },
			{{-1, REDUCE, 8}, {14, SHIFT, 38}, },
			{{-1, ERROR, 11}, {20, SHIFT, 39}, },
			{{-1, ERROR, 12}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 13}, {18, SHIFT, 41}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 58}, {20, SHIFT, 43}, },
			{{-1, ERROR, 19}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 20}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 24}, {26, SHIFT, 46}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, {35, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, REDUCE, 32}, {19, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, {33, SHIFT, 53}, {34, SHIFT, 54}, },
			{{-1, REDUCE, 38}, {24, SHIFT, 55}, {25, SHIFT, 56}, },
			{{-1, REDUCE, 41}, {27, SHIFT, 57}, {28, SHIFT, 58}, {29, SHIFT, 59}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 33}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {38, SHIFT, 23}, },
			{{-1, ERROR, 34}, {19, SHIFT, 61}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 37}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 39}, {18, SHIFT, 63}, },
			{{-1, ERROR, 40}, {9, SHIFT, 67}, },
			{{-1, REDUCE, 10}, {14, SHIFT, 68}, },
			{{-1, ERROR, 42}, {19, SHIFT, 69}, },
			{{-1, ERROR, 43}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {21, SHIFT, 70}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 44}, {21, SHIFT, 75}, },
			{{-1, ERROR, 45}, {23, SHIFT, 76}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 47}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 48}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 49}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 50}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 51}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 52}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 53}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 54}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 55}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 56}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 57}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 58}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 59}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 61}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 62}, {26, SHIFT, 91}, },
			{{-1, REDUCE, 6}, {14, SHIFT, 92}, {30, SHIFT, 93}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 65}, {21, SHIFT, 94}, },
			{{-1, ERROR, 66}, {18, SHIFT, 63}, },
			{{-1, ERROR, 67}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 69}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 72}, {21, SHIFT, 99}, },
			{{-1, REDUCE, 15}, {30, SHIFT, 100}, },
			{{-1, ERROR, 74}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {21, SHIFT, 101}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 30}, {19, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, {33, SHIFT, 53}, {34, SHIFT, 54}, },
			{{-1, REDUCE, 29}, {19, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, {33, SHIFT, 53}, {34, SHIFT, 54}, },
			{{-1, REDUCE, 31}, {19, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, {33, SHIFT, 53}, {34, SHIFT, 54}, },
			{{-1, REDUCE, 33}, {24, SHIFT, 55}, {25, SHIFT, 56}, },
			{{-1, REDUCE, 34}, {24, SHIFT, 55}, {25, SHIFT, 56}, },
			{{-1, REDUCE, 35}, {24, SHIFT, 55}, {25, SHIFT, 56}, },
			{{-1, REDUCE, 36}, {24, SHIFT, 55}, {25, SHIFT, 56}, },
			{{-1, REDUCE, 37}, {24, SHIFT, 55}, {25, SHIFT, 56}, },
			{{-1, REDUCE, 39}, {27, SHIFT, 57}, {28, SHIFT, 58}, {29, SHIFT, 59}, },
			{{-1, REDUCE, 40}, {27, SHIFT, 57}, {28, SHIFT, 58}, {29, SHIFT, 59}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 90}, {4, SHIFT, 104}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 7}, {30, SHIFT, 105}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 94}, {14, SHIFT, 106}, {19, SHIFT, 107}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 96}, {21, SHIFT, 108}, },
			{{-1, ERROR, 97}, {10, SHIFT, 109}, },
			{{-1, ERROR, 98}, {12, SHIFT, 110}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 103}, {21, SHIFT, 111}, },
			{{-1, ERROR, 104}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 106}, {19, SHIFT, 113}, },
			{{-1, ERROR, 107}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 108}, {14, SHIFT, 115}, {19, SHIFT, 116}, },
			{{-1, ERROR, 109}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 110}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 112}, {2, SHIFT, 119}, },
			{{-1, ERROR, 113}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 114}, {26, SHIFT, 121}, },
			{{-1, ERROR, 115}, {19, SHIFT, 122}, },
			{{-1, ERROR, 116}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 119}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 120}, {26, SHIFT, 125}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 122}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {15, SHIFT, 15}, {16, SHIFT, 16}, {17, SHIFT, 17}, {18, SHIFT, 18}, {20, SHIFT, 19}, {22, SHIFT, 20}, {24, SHIFT, 21}, {25, SHIFT, 22}, {38, SHIFT, 23}, },
			{{-1, ERROR, 123}, {26, SHIFT, 127}, },
			{{-1, ERROR, 124}, {26, SHIFT, 128}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 126}, {26, SHIFT, 129}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 22}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 5}, },
			{{-1, 64}, {66, 95}, },
			{{-1, 65}, {66, 96}, },
			{{-1, 11}, },
			{{-1, 42}, },
			{{-1, 9}, },
			{{-1, 71}, {74, 102}, },
			{{-1, 72}, {74, 103}, },
			{{-1, 6}, {7, 35}, },
			{{-1, 73}, {3, 24}, {12, 40}, {19, 44}, {20, 45}, {37, 62}, {61, 90}, {67, 97}, {69, 98}, {104, 112}, {107, 114}, {109, 117}, {110, 118}, {113, 120}, {116, 123}, {119, 124}, {122, 126}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 27}, {47, 77}, {48, 78}, {49, 79}, },
			{{-1, 28}, {50, 80}, {51, 81}, {52, 82}, {53, 83}, {54, 84}, },
			{{-1, 29}, {55, 85}, {56, 86}, },
			{{-1, 30}, {57, 87}, {58, 88}, {59, 89}, },
			{{-1, 31}, {33, 60}, },
			{{-1, 32}, },
			{{-1, 33}, },
			{{-1, 7}, },
			{{-1, 66}, },
			{{-1, 74}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'var', 'function', 'print', 'for', EOF",
			"expecting: id",
			"expecting: 'if', 'let', 'not', int, float, bool, id, '(', '[', '+', '-', texte",
			"expecting: EOF",
			"expecting: type, '='",
			"expecting: '='",
			"expecting: type, '('",
			"expecting: '('",
			"expecting: int, float, bool, id, '(', '[', texte",
			"expecting: 'print', 'to', 'then', 'else', 'in', '=', ')', ']', '+', '-', ';', mult, '/', '%', comma, '<', '<=', '>', '>=', '&&', '||', '^^'",
			"expecting: 'print', 'to', 'then', 'else', 'in', '=', '(', ')', ']', '+', '-', ';', mult, '/', '%', comma, '<', '<=', '>', '>=', '&&', '||', '^^'",
			"expecting: ';'",
			"expecting: 'print', 'to', 'then', 'else', 'in', ')', ']', ';', comma",
			"expecting: 'print', 'to', 'then', 'else', 'in', ')', ']', ';', comma, '&&', '||', '^^'",
			"expecting: 'print', 'to', 'then', 'else', 'in', '=', ')', ']', ';', comma, '<', '<=', '>', '>=', '&&', '||', '^^'",
			"expecting: 'print', 'to', 'then', 'else', 'in', '=', ')', ']', '+', '-', ';', comma, '<', '<=', '>', '>=', '&&', '||', '^^'",
			"expecting: 'then'",
			"expecting: 'if', 'let', 'not', int, float, bool, id, '(', ')', '[', '+', '-', texte",
			"expecting: ')'",
			"expecting: ']'",
			"expecting: 'not', int, float, bool, id, '(', '[', '+', '-', texte",
			"expecting: type, ')', comma",
			"expecting: ')', comma",
			"expecting: 'to'",
			"expecting: 'else'",
			"expecting: 'in'",
			"expecting: 'print'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 1, 3, 0, 0, 4, 5, 6, 7, 2, 1, 8, 9, 9, 9, 10, 2, 2, 8, 8, 9, 11, 12, 13, 14, 15, 9, 9, 9, 9, 8, 5, 0, 5, 2, 7, 1, 16, 4, 5, 17, 18, 19, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 9, 2, 11, 21, 1, 18, 1, 2, 5, 2, 9, 17, 18, 22, 17, 9, 9, 14, 14, 14, 15, 15, 15, 15, 15, 9, 9, 9, 9, 9, 23, 0, 22, 1, 4, 1, 18, 24, 25, 9, 17, 9, 17, 18, 2, 1, 5, 2, 4, 2, 2, 9, 26, 2, 11, 5, 2, 12, 12, 2, 11, 0, 2, 11, 11, 0, 11, 0, 0, 0, 
        };*/
}
