/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.node;

import fr.umlv.ir2.compil.languageparser.analysis.*;

public final class X1PDeclarations extends XPDeclarations
{
    private XPDeclarations _xPDeclarations_;
    private PDeclarations _pDeclarations_;

    public X1PDeclarations()
    {
    }

    public X1PDeclarations(
        XPDeclarations _xPDeclarations_,
        PDeclarations _pDeclarations_)
    {
        setXPDeclarations(_xPDeclarations_);
        setPDeclarations(_pDeclarations_);
    }

    public Object clone()
    {
        throw new RuntimeException("Unsupported Operation");
    }

    public void apply(Switch sw)
    {
        throw new RuntimeException("Switch not supported.");
    }

    public XPDeclarations getXPDeclarations()
    {
        return _xPDeclarations_;
    }

    public void setXPDeclarations(XPDeclarations node)
    {
        if(_xPDeclarations_ != null)
        {
            _xPDeclarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _xPDeclarations_ = node;
    }

    public PDeclarations getPDeclarations()
    {
        return _pDeclarations_;
    }

    public void setPDeclarations(PDeclarations node)
    {
        if(_pDeclarations_ != null)
        {
            _pDeclarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _pDeclarations_ = node;
    }

    void removeChild(Node child)
    {
        if(_xPDeclarations_ == child)
        {
            _xPDeclarations_ = null;
        }

        if(_pDeclarations_ == child)
        {
            _pDeclarations_ = null;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
    }

    public String toString()
    {
        return "" +
            toString(_xPDeclarations_) +
            toString(_pDeclarations_);
    }
}
