/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.node;

import java.util.*;
import fr.umlv.ir2.compil.languageparser.analysis.*;

public final class ALetExprIfLet extends PExprIfLet
{
    private TMcLet _mcLet_;
    private PLocalVar _localVar_;
    private TEqual _equal_;
    private PExpression _a_;
    private TMcIn _mcIn_;
    private PExpression _b_;

    public ALetExprIfLet()
    {
    }

    public ALetExprIfLet(
        TMcLet _mcLet_,
        PLocalVar _localVar_,
        TEqual _equal_,
        PExpression _a_,
        TMcIn _mcIn_,
        PExpression _b_)
    {
        setMcLet(_mcLet_);

        setLocalVar(_localVar_);

        setEqual(_equal_);

        setA(_a_);

        setMcIn(_mcIn_);

        setB(_b_);

    }
    public Object clone()
    {
        return new ALetExprIfLet(
            (TMcLet) cloneNode(_mcLet_),
            (PLocalVar) cloneNode(_localVar_),
            (TEqual) cloneNode(_equal_),
            (PExpression) cloneNode(_a_),
            (TMcIn) cloneNode(_mcIn_),
            (PExpression) cloneNode(_b_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALetExprIfLet(this);
    }

    public TMcLet getMcLet()
    {
        return _mcLet_;
    }

    public void setMcLet(TMcLet node)
    {
        if(_mcLet_ != null)
        {
            _mcLet_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mcLet_ = node;
    }

    public PLocalVar getLocalVar()
    {
        return _localVar_;
    }

    public void setLocalVar(PLocalVar node)
    {
        if(_localVar_ != null)
        {
            _localVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _localVar_ = node;
    }

    public TEqual getEqual()
    {
        return _equal_;
    }

    public void setEqual(TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _equal_ = node;
    }

    public PExpression getA()
    {
        return _a_;
    }

    public void setA(PExpression node)
    {
        if(_a_ != null)
        {
            _a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _a_ = node;
    }

    public TMcIn getMcIn()
    {
        return _mcIn_;
    }

    public void setMcIn(TMcIn node)
    {
        if(_mcIn_ != null)
        {
            _mcIn_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mcIn_ = node;
    }

    public PExpression getB()
    {
        return _b_;
    }

    public void setB(PExpression node)
    {
        if(_b_ != null)
        {
            _b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _b_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_mcLet_)
            + toString(_localVar_)
            + toString(_equal_)
            + toString(_a_)
            + toString(_mcIn_)
            + toString(_b_);
    }

    void removeChild(Node child)
    {
        if(_mcLet_ == child)
        {
            _mcLet_ = null;
            return;
        }

        if(_localVar_ == child)
        {
            _localVar_ = null;
            return;
        }

        if(_equal_ == child)
        {
            _equal_ = null;
            return;
        }

        if(_a_ == child)
        {
            _a_ = null;
            return;
        }

        if(_mcIn_ == child)
        {
            _mcIn_ = null;
            return;
        }

        if(_b_ == child)
        {
            _b_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_mcLet_ == oldChild)
        {
            setMcLet((TMcLet) newChild);
            return;
        }

        if(_localVar_ == oldChild)
        {
            setLocalVar((PLocalVar) newChild);
            return;
        }

        if(_equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(_a_ == oldChild)
        {
            setA((PExpression) newChild);
            return;
        }

        if(_mcIn_ == oldChild)
        {
            setMcIn((TMcIn) newChild);
            return;
        }

        if(_b_ == oldChild)
        {
            setB((PExpression) newChild);
            return;
        }

    }
}
