/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.ir2.compil.languageparser.node;

import java.util.*;
import fr.umlv.ir2.compil.languageparser.analysis.*;

public final class AIfExprIfLet extends PExprIfLet
{
    private TMcIf _mcIf_;
    private PExpression _a_;
    private TMcThen _mcThen_;
    private PExpression _c_;
    private TMcElse _mcElse_;
    private PExpression _e_;

    public AIfExprIfLet()
    {
    }

    public AIfExprIfLet(
        TMcIf _mcIf_,
        PExpression _a_,
        TMcThen _mcThen_,
        PExpression _c_,
        TMcElse _mcElse_,
        PExpression _e_)
    {
        setMcIf(_mcIf_);

        setA(_a_);

        setMcThen(_mcThen_);

        setC(_c_);

        setMcElse(_mcElse_);

        setE(_e_);

    }
    public Object clone()
    {
        return new AIfExprIfLet(
            (TMcIf) cloneNode(_mcIf_),
            (PExpression) cloneNode(_a_),
            (TMcThen) cloneNode(_mcThen_),
            (PExpression) cloneNode(_c_),
            (TMcElse) cloneNode(_mcElse_),
            (PExpression) cloneNode(_e_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfExprIfLet(this);
    }

    public TMcIf getMcIf()
    {
        return _mcIf_;
    }

    public void setMcIf(TMcIf node)
    {
        if(_mcIf_ != null)
        {
            _mcIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mcIf_ = node;
    }

    public PExpression getA()
    {
        return _a_;
    }

    public void setA(PExpression node)
    {
        if(_a_ != null)
        {
            _a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _a_ = node;
    }

    public TMcThen getMcThen()
    {
        return _mcThen_;
    }

    public void setMcThen(TMcThen node)
    {
        if(_mcThen_ != null)
        {
            _mcThen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mcThen_ = node;
    }

    public PExpression getC()
    {
        return _c_;
    }

    public void setC(PExpression node)
    {
        if(_c_ != null)
        {
            _c_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _c_ = node;
    }

    public TMcElse getMcElse()
    {
        return _mcElse_;
    }

    public void setMcElse(TMcElse node)
    {
        if(_mcElse_ != null)
        {
            _mcElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mcElse_ = node;
    }

    public PExpression getE()
    {
        return _e_;
    }

    public void setE(PExpression node)
    {
        if(_e_ != null)
        {
            _e_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _e_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_mcIf_)
            + toString(_a_)
            + toString(_mcThen_)
            + toString(_c_)
            + toString(_mcElse_)
            + toString(_e_);
    }

    void removeChild(Node child)
    {
        if(_mcIf_ == child)
        {
            _mcIf_ = null;
            return;
        }

        if(_a_ == child)
        {
            _a_ = null;
            return;
        }

        if(_mcThen_ == child)
        {
            _mcThen_ = null;
            return;
        }

        if(_c_ == child)
        {
            _c_ = null;
            return;
        }

        if(_mcElse_ == child)
        {
            _mcElse_ = null;
            return;
        }

        if(_e_ == child)
        {
            _e_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_mcIf_ == oldChild)
        {
            setMcIf((TMcIf) newChild);
            return;
        }

        if(_a_ == oldChild)
        {
            setA((PExpression) newChild);
            return;
        }

        if(_mcThen_ == oldChild)
        {
            setMcThen((TMcThen) newChild);
            return;
        }

        if(_c_ == oldChild)
        {
            setC((PExpression) newChild);
            return;
        }

        if(_mcElse_ == oldChild)
        {
            setMcElse((TMcElse) newChild);
            return;
        }

        if(_e_ == oldChild)
        {
            setE((PExpression) newChild);
            return;
        }

    }
}
